// Copyright (C) 2005-2010 Code Synthesis Tools CC
//
// This program was generated by CodeSynthesis XSD, an XML Schema to
// C++ data binding compiler.
//
// This program is free software; you can redistribute it and/or modify
// it under the terms of the GNU General Public License version 2 as
// published by the Free Software Foundation.
//
// This program is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
// GNU General Public License for more details.
//
// You should have received a copy of the GNU General Public License
// along with this program; if not, write to the Free Software
// Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA 02110-1301 USA
//
// In addition, as a special exception, Code Synthesis Tools CC gives
// permission to link this program with the Xerces-C++ library (or with
// modified versions of Xerces-C++ that use the same license as Xerces-C++),
// and distribute linked combinations including the two. You must obey
// the GNU General Public License version 2 in all respects for all of
// the code used other than Xerces-C++. If you modify this copy of the
// program, you may extend this exception to your version of the program,
// but you are not obligated to do so. If you do not wish to do so, delete
// this exception statement from your version.
//
// Furthermore, Code Synthesis Tools CC makes a special exception for
// the Free/Libre and Open Source Software (FLOSS) which is described
// in the accompanying FLOSSE file.
//

// Begin prologue.
//
//
// End prologue.

#include <xsd/cxx/pre.hxx>

#include "field.conf.hxx"

// FieldConfig
// 

const FieldConfig::Field_sequence& FieldConfig::
Field () const
{
  return this->Field_;
}

FieldConfig::Field_sequence& FieldConfig::
Field ()
{
  return this->Field_;
}

void FieldConfig::
Field (const Field_sequence& s)
{
  this->Field_ = s;
}

const FieldConfig::Parameter_sequence& FieldConfig::
Parameter () const
{
  return this->Parameter_;
}

FieldConfig::Parameter_sequence& FieldConfig::
Parameter ()
{
  return this->Parameter_;
}

void FieldConfig::
Parameter (const Parameter_sequence& s)
{
  this->Parameter_ = s;
}

const FieldConfig::version_type& FieldConfig::
version () const
{
  return this->version_.get ();
}

FieldConfig::version_type& FieldConfig::
version ()
{
  return this->version_.get ();
}

void FieldConfig::
version (const version_type& x)
{
  this->version_.set (x);
}


// Field
// 

const Field::name_type& Field::
name () const
{
  return this->name_.get ();
}

Field::name_type& Field::
name ()
{
  return this->name_.get ();
}

void Field::
name (const name_type& x)
{
  this->name_.set (x);
}

void Field::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

const Field::value_type& Field::
value () const
{
  return this->value_.get ();
}

Field::value_type& Field::
value ()
{
  return this->value_.get ();
}

void Field::
value (const value_type& x)
{
  this->value_.set (x);
}


// Parameter
// 

const Parameter::name_type& Parameter::
name () const
{
  return this->name_.get ();
}

Parameter::name_type& Parameter::
name ()
{
  return this->name_.get ();
}

void Parameter::
name (const name_type& x)
{
  this->name_.set (x);
}

void Parameter::
name (::std::auto_ptr< name_type > x)
{
  this->name_.set (x);
}

const Parameter::value_type& Parameter::
value () const
{
  return this->value_.get ();
}

Parameter::value_type& Parameter::
value ()
{
  return this->value_.get ();
}

void Parameter::
value (const value_type& x)
{
  this->value_.set (x);
}

const Parameter::comment_type& Parameter::
comment () const
{
  return this->comment_.get ();
}

Parameter::comment_type& Parameter::
comment ()
{
  return this->comment_.get ();
}

void Parameter::
comment (const comment_type& x)
{
  this->comment_.set (x);
}

void Parameter::
comment (::std::auto_ptr< comment_type > x)
{
  this->comment_.set (x);
}


#include <xsd/cxx/xml/dom/parsing-source.hxx>

// FieldConfig
//

FieldConfig::
FieldConfig (const version_type& version)
: ::xml_schema::type (),
  Field_ (::xml_schema::flags (), this),
  Parameter_ (::xml_schema::flags (), this),
  version_ (version, ::xml_schema::flags (), this)
{
}

FieldConfig::
FieldConfig (const FieldConfig& x,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  Field_ (x.Field_, f, this),
  Parameter_ (x.Parameter_, f, this),
  version_ (x.version_, f, this)
{
}

FieldConfig::
FieldConfig (const ::xercesc::DOMElement& e,
             ::xml_schema::flags f,
             ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  Field_ (f, this),
  Parameter_ (f, this),
  version_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, true, true);
    this->parse (p, f);
  }
}

void FieldConfig::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  for (; p.more_elements (); p.next_element ())
  {
    const ::xercesc::DOMElement& i (p.cur_element ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    // Field
    //
    if (n.name () == "Field" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Field_type > r (
        Field_traits::create (i, f, this));

      this->Field_.push_back (r);
      continue;
    }

    // Parameter
    //
    if (n.name () == "Parameter" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< Parameter_type > r (
        Parameter_traits::create (i, f, this));

      this->Parameter_.push_back (r);
      continue;
    }

    break;
  }

  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "version" && n.namespace_ ().empty ())
    {
      this->version_.set (version_traits::create (i, f, this));
      continue;
    }
  }

  if (!version_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "version",
      "");
  }
}

FieldConfig* FieldConfig::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class FieldConfig (*this, f, c);
}

FieldConfig::
~FieldConfig ()
{
}

// Field
//

Field::
Field (const name_type& name,
       const value_type& value)
: ::xml_schema::type (),
  name_ (name, ::xml_schema::flags (), this),
  value_ (value, ::xml_schema::flags (), this)
{
}

Field::
Field (const Field& x,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  name_ (x.name_, f, this),
  value_ (x.value_, f, this)
{
}

Field::
Field (const ::xercesc::DOMElement& e,
       ::xml_schema::flags f,
       ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  name_ (f, this),
  value_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void Field::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< name_type > r (
        name_traits::create (i, f, this));

      this->name_.set (r);
      continue;
    }

    if (n.name () == "value" && n.namespace_ ().empty ())
    {
      this->value_.set (value_traits::create (i, f, this));
      continue;
    }
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!value_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "value",
      "");
  }
}

Field* Field::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class Field (*this, f, c);
}

Field::
~Field ()
{
}

// Parameter
//

Parameter::
Parameter (const name_type& name,
           const value_type& value,
           const comment_type& comment)
: ::xml_schema::type (),
  name_ (name, ::xml_schema::flags (), this),
  value_ (value, ::xml_schema::flags (), this),
  comment_ (comment, ::xml_schema::flags (), this)
{
}

Parameter::
Parameter (const Parameter& x,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (x, f, c),
  name_ (x.name_, f, this),
  value_ (x.value_, f, this),
  comment_ (x.comment_, f, this)
{
}

Parameter::
Parameter (const ::xercesc::DOMElement& e,
           ::xml_schema::flags f,
           ::xml_schema::container* c)
: ::xml_schema::type (e, f | ::xml_schema::flags::base, c),
  name_ (f, this),
  value_ (f, this),
  comment_ (f, this)
{
  if ((f & ::xml_schema::flags::base) == 0)
  {
    ::xsd::cxx::xml::dom::parser< char > p (e, false, true);
    this->parse (p, f);
  }
}

void Parameter::
parse (::xsd::cxx::xml::dom::parser< char >& p,
       ::xml_schema::flags f)
{
  while (p.more_attributes ())
  {
    const ::xercesc::DOMAttr& i (p.next_attribute ());
    const ::xsd::cxx::xml::qualified_name< char > n (
      ::xsd::cxx::xml::dom::name< char > (i));

    if (n.name () == "name" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< name_type > r (
        name_traits::create (i, f, this));

      this->name_.set (r);
      continue;
    }

    if (n.name () == "value" && n.namespace_ ().empty ())
    {
      this->value_.set (value_traits::create (i, f, this));
      continue;
    }

    if (n.name () == "comment" && n.namespace_ ().empty ())
    {
      ::std::auto_ptr< comment_type > r (
        comment_traits::create (i, f, this));

      this->comment_.set (r);
      continue;
    }
  }

  if (!name_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "name",
      "");
  }

  if (!value_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "value",
      "");
  }

  if (!comment_.present ())
  {
    throw ::xsd::cxx::tree::expected_attribute< char > (
      "comment",
      "");
  }
}

Parameter* Parameter::
_clone (::xml_schema::flags f,
        ::xml_schema::container* c) const
{
  return new class Parameter (*this, f, c);
}

Parameter::
~Parameter ()
{
}

#include <istream>
#include <xsd/cxx/xml/sax/std-input-source.hxx>
#include <xsd/cxx/tree/error-handler.hxx>

::std::auto_ptr< ::FieldConfig >
FieldConfig_ (const ::std::string& u,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::FieldConfig > r (
    ::FieldConfig_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::FieldConfig >
FieldConfig_ (const ::std::string& u,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::FieldConfig > r (
    ::FieldConfig_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::FieldConfig >
FieldConfig_ (const ::std::string& u,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      u, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::FieldConfig > r (
    ::FieldConfig_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::FieldConfig >
FieldConfig_ (::std::istream& is,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::FieldConfig_ (isrc, f, p);
}

::std::auto_ptr< ::FieldConfig >
FieldConfig_ (::std::istream& is,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::FieldConfig_ (isrc, h, f, p);
}

::std::auto_ptr< ::FieldConfig >
FieldConfig_ (::std::istream& is,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is);
  return ::FieldConfig_ (isrc, h, f, p);
}

::std::auto_ptr< ::FieldConfig >
FieldConfig_ (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::FieldConfig_ (isrc, f, p);
}

::std::auto_ptr< ::FieldConfig >
FieldConfig_ (::std::istream& is,
              const ::std::string& sid,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0,
    (f & ::xml_schema::flags::keep_dom) == 0);

  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::FieldConfig_ (isrc, h, f, p);
}

::std::auto_ptr< ::FieldConfig >
FieldConfig_ (::std::istream& is,
              const ::std::string& sid,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::xml::sax::std_input_source isrc (is, sid);
  return ::FieldConfig_ (isrc, h, f, p);
}

::std::auto_ptr< ::FieldConfig >
FieldConfig_ (::xercesc::InputSource& i,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xsd::cxx::tree::error_handler< char > h;

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  h.throw_if_failed< ::xsd::cxx::tree::parsing< char > > ();

  ::std::auto_ptr< ::FieldConfig > r (
    ::FieldConfig_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::FieldConfig >
FieldConfig_ (::xercesc::InputSource& i,
              ::xml_schema::error_handler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::FieldConfig > r (
    ::FieldConfig_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::FieldConfig >
FieldConfig_ (::xercesc::InputSource& i,
              ::xercesc::DOMErrorHandler& h,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::parse< char > (
      i, h, p, f));

  if (!d.get ())
    throw ::xsd::cxx::tree::parsing< char > ();

  ::std::auto_ptr< ::FieldConfig > r (
    ::FieldConfig_ (
      d, f | ::xml_schema::flags::own_dom, p));

  return r;
}

::std::auto_ptr< ::FieldConfig >
FieldConfig_ (const ::xercesc::DOMDocument& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties& p)
{
  if (f & ::xml_schema::flags::keep_dom)
  {
    ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
      static_cast< ::xercesc::DOMDocument* > (d.cloneNode (true)));

    ::std::auto_ptr< ::FieldConfig > r (
      ::FieldConfig_ (
        c, f | ::xml_schema::flags::own_dom, p));

    return r;
  }

  const ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "FieldConfig" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::FieldConfig > r (
      ::xsd::cxx::tree::traits< ::FieldConfig, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "FieldConfig",
    "");
}

::std::auto_ptr< ::FieldConfig >
FieldConfig_ (::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >& d,
              ::xml_schema::flags f,
              const ::xml_schema::properties&)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > c (
    ((f & ::xml_schema::flags::keep_dom) &&
     !(f & ::xml_schema::flags::own_dom))
    ? static_cast< ::xercesc::DOMDocument* > (d->cloneNode (true))
    : 0);

  ::xercesc::DOMDocument& doc (c.get () ? *c : *d);
  const ::xercesc::DOMElement& e (*doc.getDocumentElement ());

  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (f & ::xml_schema::flags::keep_dom)
    doc.setUserData (::xml_schema::dom::tree_node_key,
                     (c.get () ? &c : &d),
                     0);

  if (n.name () == "FieldConfig" &&
      n.namespace_ () == "")
  {
    ::std::auto_ptr< ::FieldConfig > r (
      ::xsd::cxx::tree::traits< ::FieldConfig, char >::create (
        e, f, 0));
    return r;
  }

  throw ::xsd::cxx::tree::unexpected_element < char > (
    n.name (),
    n.namespace_ (),
    "FieldConfig",
    "");
}

#include <ostream>
#include <xsd/cxx/tree/error-handler.hxx>
#include <xsd/cxx/xml/dom/serialization-source.hxx>

void
FieldConfig_ (::std::ostream& o,
              const ::FieldConfig& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::FieldConfig_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
FieldConfig_ (::std::ostream& o,
              const ::FieldConfig& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xsd::cxx::xml::auto_initializer i (
    (f & ::xml_schema::flags::dont_initialize) == 0);

  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::FieldConfig_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
FieldConfig_ (::std::ostream& o,
              const ::FieldConfig& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::FieldConfig_ (s, m, f));
  ::xsd::cxx::xml::dom::ostream_format_target t (o);
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
FieldConfig_ (::xercesc::XMLFormatTarget& t,
              const ::FieldConfig& s,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::FieldConfig_ (s, m, f));

  ::xsd::cxx::tree::error_handler< char > h;

  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    h.throw_if_failed< ::xsd::cxx::tree::serialization< char > > ();
  }
}

void
FieldConfig_ (::xercesc::XMLFormatTarget& t,
              const ::FieldConfig& s,
              ::xml_schema::error_handler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::FieldConfig_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
FieldConfig_ (::xercesc::XMLFormatTarget& t,
              const ::FieldConfig& s,
              ::xercesc::DOMErrorHandler& h,
              const ::xml_schema::namespace_infomap& m,
              const ::std::string& e,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::FieldConfig_ (s, m, f));
  if (!::xsd::cxx::xml::dom::serialize (t, *d, e, h, f))
  {
    throw ::xsd::cxx::tree::serialization< char > ();
  }
}

void
FieldConfig_ (::xercesc::DOMDocument& d,
              const ::FieldConfig& s,
              ::xml_schema::flags)
{
  ::xercesc::DOMElement& e (*d.getDocumentElement ());
  const ::xsd::cxx::xml::qualified_name< char > n (
    ::xsd::cxx::xml::dom::name< char > (e));

  if (n.name () == "FieldConfig" &&
      n.namespace_ () == "")
  {
    e << s;
  }
  else
  {
    throw ::xsd::cxx::tree::unexpected_element < char > (
      n.name (),
      n.namespace_ (),
      "FieldConfig",
      "");
  }
}

::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument >
FieldConfig_ (const ::FieldConfig& s,
              const ::xml_schema::namespace_infomap& m,
              ::xml_schema::flags f)
{
  ::xml_schema::dom::auto_ptr< ::xercesc::DOMDocument > d (
    ::xsd::cxx::xml::dom::serialize< char > (
      "FieldConfig",
      "",
      m, f));

  ::FieldConfig_ (*d, s, f);
  return d;
}

void
operator<< (::xercesc::DOMElement& e, const FieldConfig& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // Field
  //
  for (FieldConfig::Field_const_iterator
       b (i.Field ().begin ()), n (i.Field ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Field",
        e));

    s << *b;
  }

  // Parameter
  //
  for (FieldConfig::Parameter_const_iterator
       b (i.Parameter ().begin ()), n (i.Parameter ().end ());
       b != n; ++b)
  {
    ::xercesc::DOMElement& s (
      ::xsd::cxx::xml::dom::create_element (
        "Parameter",
        e));

    s << *b;
  }

  // version
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "version",
        e));

    a << i.version ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const Field& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // value
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "value",
        e));

    a << i.value ();
  }
}

void
operator<< (::xercesc::DOMElement& e, const Parameter& i)
{
  e << static_cast< const ::xml_schema::type& > (i);

  // name
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "name",
        e));

    a << i.name ();
  }

  // value
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "value",
        e));

    a << i.value ();
  }

  // comment
  //
  {
    ::xercesc::DOMAttr& a (
      ::xsd::cxx::xml::dom::create_attribute (
        "comment",
        e));

    a << i.comment ();
  }
}

#include <xsd/cxx/post.hxx>

// Begin epilogue.
//
//
// End epilogue.

